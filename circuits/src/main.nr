#[oracle(inference)]
unconstrained fn call_ml_model(bytecode: str<2346>) -> [Field; 2] {}
unconstrained fn zk_ml(bytecode: str<2346>) -> [Field; 2] {
    call_ml_model(bytecode)
}

fn unwrap_model_report(inference_result: [Field; 2]) -> bool {
    inference_result[0] as bool
}

fn main(bytecode: pub str<2346>) {
    let inference_result = zk_ml(bytecode);
    println(inference_result);

    let model_report = unwrap_model_report(inference_result);
    println(model_report);

    assert(model_report == true);
}

////////////////////
//     TESTS      //
////////////////////

// #[test(should_fail)]
// fn test_zk_ml() {
//     let vulnerable_bytecode = "608060405234801561000f575f80fd5b506104788061001d5f395ff3fe60806040526004361061003e575f3560e01c806312065fe01461004257806327e235e31461006c5780633ccfd60b146100a8578063d0e30db0146100be575b5f80fd5b34801561004d575f80fd5b506100566100c8565b6040516100639190610287565b60405180910390f35b348015610077575f80fd5b50610092600480360381019061008d91906102fe565b6100cf565b60405161009f9190610287565b60405180910390f35b3480156100b3575f80fd5b506100bc6100e3565b005b6100c661021b565b005b5f47905090565b5f602052805f5260405f205f915090505481565b5f805f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f811161012e575f80fd5b5f3373ffffffffffffffffffffffffffffffffffffffff168260405161015390610356565b5f6040518083038185875af1925050503d805f811461018d576040519150601f19603f3d011682016040523d82523d5f602084013e610192565b606091505b50509050806101d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cd906103c4565b60405180910390fd5b5f805f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505050565b345f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610266919061040f565b92505081905550565b5f819050919050565b6102818161026f565b82525050565b5f60208201905061029a5f830184610278565b92915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102cd826102a4565b9050919050565b6102dd816102c3565b81146102e7575f80fd5b50565b5f813590506102f8816102d4565b92915050565b5f60208284031215610313576103126102a0565b5b5f610320848285016102ea565b91505092915050565b5f81905092915050565b50565b5f6103415f83610329565b915061034c82610333565b5f82019050919050565b5f61036082610336565b9150819050919050565b5f82825260208201905092915050565b7f4661696c656420746f2073656e642045746865720000000000000000000000005f82015250565b5f6103ae60148361036a565b91506103b98261037a565b602082019050919050565b5f6020820190508181035f8301526103db816103a2565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6104198261026f565b91506104248361026f565b925082820190508082111561043c5761043b6103e2565b5b9291505056fea26469706673582212206243e7c4a88cc8fe256633dea0cdd1a60d72a518099591e2b354a36dc301940264736f6c63430008180033";

//     assert(main(vulnerable_bytecode));
// }
